from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup

class MyState(StatesGroup):
    waiting_for_data = State()

bot_token = '6402356678:AAFJ30b66g4dctGd2x6FSEResJL2bRYzQqE'
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(Command('start'))
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_input = types.KeyboardButton('Ввод гро')
    button_show = types.KeyboardButton('Показать данные')
    keyboard.add(button_input, button_show)
    await message.reply("Нажмите на кнопку 'Ввод гро' для ввода данных или 'Показать данные' для отображения содержимого baza.xml", reply_markup=keyboard)

@dp.message_handler(text='Ввод гро')
async def input_gro(message: types.Message):
    await message.reply("Введите данные в формате 'название, x, y, h': ")
    await MyState.waiting_for_data.set()

@dp.message_handler(text='Показать данные')
async def show_data(message: types.Message):
    with open('baza.xml', 'r') as f:
        data = f.read()
    formatted_data = data.replace('<name>', '').replace('</name>', '').replace('<x>', 'x=').replace('</x>', '').replace('<y>', 'y=').replace('</y>', '').replace('<h>', 'h=').replace('</h>', '')
    await message.reply(formatted_data)

@dp.message_handler(state=MyState.waiting_for_data)
async def process_data(message: types.Message, state: FSMContext):
    data = message.text.split(',')
    if len(data) == 4:
        name = data[0].strip()
        x = data[1].strip()
        y = data[2].strip()
        h = data[3].strip()

        with open('baza.xml', 'a') as f:
            f.write(f"**********************\n"
                    f" "
                    f"<name>{name}: \n"
                    f"              </name><x>{x}</x>  \n"
                    f"              <y>{y}</y>  \n"
                    f"              <h>{h}</h> \n")

        await message.reply("Данные успешно записаны")
    else:
        await message.reply("Некорректный формат данных")

    await state.finish()

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
